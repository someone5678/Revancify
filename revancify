#!/usr/bin/bash

cd "$HOME" || exit 1

SRC="$HOME/Revancify"

DATA="$SRC/data"
[ -e "$DATA" ] || mkdir -p "$DATA"

BIN="$PREFIX/bin"

HELP="revancify

Usage: revancify [OPTION]

Options:
-u:  Disable Update Check
-r:  Disable Root access
-v:  Print current version
-h:  Print help statement"

while getopts ":urvh" OPT 2> /dev/null; do
    case $OPT in
        u)
            INTERNET_ACCESS=false
            ;;
        r)
            ROOT_ACCESS=false
            ;;
        v)
            source "$SRC/.info"
            echo "$VERSION"
            exit
            ;;
        h)
            echo -e "$HELP"
            exit
            ;;
        ?)
            echo -e "Invalid option specified: -${OPTARG}"
            echo -e "$HELP"
            exit 1
            ;;
    esac
done

terminate() {
    killall -9 curl &> /dev/null
    killall -9 wget &> /dev/null
    clear
    echo "Script terminated !!"
    tput cnorm
    exit 1
}
trap terminate SIGTERM SIGINT SIGABRT

installDependencies() {
    echo "Checking dependencies..."

    BINS=$(ls "$BIN")
    grep -q java <<< "$BINS" || PKGS+=("openjdk-21")
    grep -q wget <<< "$BINS" || PKGS+=("wget")
    grep -q tput <<< "$BINS" || PKGS+=("ncurses-utils")
    grep -q dialog <<< "$BINS" || PKGS+=("dialog")
    grep -q pup <<< "$BINS" || PKGS+=("pup")
    grep -q jq <<< "$BINS" || PKGS+=("jq")
    grep -q unzip <<< "$BINS" || PKGS+=("unzip")

    if [ "${#PKGS[@]}" -ne 0 ]; then
        pkg update -o
        pkg install "${PKGS[@]}" -y -o Dpkg::Options::="--force-confnew" || return 1
    fi

    sed -i '/allow-external-apps/s/# //' "$HOME/.termux/termux.properties"

    CTR=0 && while [ ! -e "$DATA/aapt2" ]; do
        [ $CTR -gt 2 ] && return 1
        ARCH=$(getprop ro.product.cpu.abi)
        wget "https://github.com/someone5678/revanced-aapt2/releases/latest/download/aapt2_$ARCH" -O "$DATA/aapt2"
        chmod +x "$DATA/aapt2"
        if "$DATA/aapt2" version &> /dev/null; then
            break
        else
            rm "$DATA/aapt2"
        fi
        (( CTR++ ))
    done

    CTR=0 && while [ ! -e "$DATA/ApkEditor.jar" ]; do
        [ $CTR -gt 2 ] && return 1
        readarray -t RESPONSE < <(curl -s "https://api.github.com/repos/REAndroid/APKEditor/releases/latest" | jq -r '.assets[0] | .browser_download_url, .size')
        wget "${RESPONSE[0]}" -O "$DATA/ApkEditor.jar"
        if [ "${RESPONSE[1]}" == "$(stat -c%s "$DATA/ApkEditor.jar")" ]; then
            break
        else
            rm "$DATA/ApkEditor.jar"
        fi
        (( CTR++ ))
    done

    return 0
}

fetchSrc() {
    [ -e "$SRC/.info" ] && source "$SRC/.info"

    [ "$INTERNET_ACCESS" == false ] && return

    echo "Checking Latest Release..."

    TAG=$(curl -s 'https://api.github.com/repos/someone5678/Revancify/releases/latest' 2> /dev/null | jq -r '.tag_name')

    [ "$TAG" == "$VERSION" ] && return

    echo "Revancify $TAG is available..."

    echo "Installing..."

    wget -qc "https://api.github.com/repos/someone5678/Revancify/zipball/$TAG" -O "$TAG"
    if [ -e "$TAG" ]; then
        unzip -qqo "$TAG" &> /dev/null
        rm "$TAG" &> /dev/null
        mv -f someone5678*/* someone5678*/.* "$SRC/" &> /dev/null
        rm -rf someone5678* &> /dev/null
        cp -f "$SRC/revancify" "$BIN/revancify"
        chmod +x "$BIN/revancify"
        echo -e "Revancify $TAG is now installed.\nRun 'revancify -h' for help."
        exit
    else
        echo -e "Unable to install Revancify $TAG !!\nPlease try again with proper Internet"
        exit 1
    fi
}

clear

if ! installDependencies; then
    echo -e "Dependencies not installed !!\nRun again with internet connection."
    exit 1
fi

fetchSrc

if [ "$ROOT_ACCESS" != false ] && su -c 'exit' &> /dev/null ; then
    ROOT_ACCESS=true
else
    ROOT_ACCESS=false
fi

cd "$DATA" &> /dev/null || exit 1

tput civis

bash "$SRC/main.sh" "$ROOT_ACCESS"
EXIT_CODE=$?

tput cnorm
clear

exit "$EXIT_CODE"
